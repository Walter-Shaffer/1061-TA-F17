import java.util.Scanner;
/*
* Bagels.java
* Author: Heather Wright
* Submission Date: November 3, 2017
*
* Purpose: This is the main method. It invokes the methods
* created in Player, Engine, and Validator to create the game.
* it begins by welcoming the user and asking the to enter their
* name and the number of digits they would like to use. Next it 
* prompts them to enter their guess. If this guess does not equal
* the number randomly generated in the Engine class they must guess
* again. When they guess the right number, the program congratulates 
* them and prints out their stats for the game. This includes the 
* users fastest win, the number of games they have completed, and 
* the number of digits they used. Upon completion it asks the user 
* to input p to play again, r to reset the game for a new user, or
* q to quit. The method will loop until the user types q to quit.
*
* Statement of Academic Honesty:
*
* The following code represents my own work. I have neither
* received nor given inappropriate assistance. I have not copied
* or modified code from any source other than the course webpage
* or the course textbook. I recognize that any unauthorized
* assistance or plagiarism will be handled in accordance
* with the policies at Clemson University and the
* policies of this course. I recognize that my work is based
* on an assignment created by the School of Computing
* at Clemson University. Any publishing or posting
* of source code for this project is strictly prohibited
* unless you have written consent from the instructor.
*/
public class Bagels {
	public static void main(String[] args) {
		Player player1 = new Player();
		Engine gameEngine = new Engine();
		Validator guessValidator = new Validator();
		Scanner keyboard = new Scanner(System.in);
		System.out.println("Welcome!");
		String guess; //the variable that holds the string of the users guess
		String c; //user input after the end of the game to either reset play again or quit
		int gamesCompleted; //increases when a game is complete
		int[] arrayGuess; //the users guess which is converted to an array
		int numberOfMoves; //increases when guess does not equal the secret number
		int[] secretNumber; //the secret number generated by the secretNumberGenerator
		do {
			player1.setName(null); //reverts player name to null in case of game reset
			System.out.print("Enter the number of digits to use: ");
			int numDigits = keyboard.nextInt();
			System.out.print("Enter the player's name: ");
			String name = keyboard.next();
			gameEngine.setNumDigits(numDigits); 
			player1.setName(name);
			player1.updateStats(0, 0); //resets stats if the user wants to reset the game
			gamesCompleted = 0; //resets the games completed to 0 if the user wants to reset the game
			do {
				gameEngine.generateNewSecretNumber(); //generated a new number if the player wants to play again or reset
				secretNumber = gameEngine.getSecretNumber();
				System.out.println("\nStarting game #" + (gamesCompleted + 1));
				numberOfMoves = 0; //number of moves is reset to 0 so it can begin a new game
				do {
					guess = player1.askForGuess();
					while(guess.length() != numDigits) { //checks to see if the guess is the correct length
						//If it is not it prompts the user to guess again. The number of moves does not increase
						System.out.println("Your guess must be a " + numDigits + " digit number.");
						guess = player1.askForGuess();
					}
					arrayGuess = gameEngine.convertNumToDigitArray(guess);
					numberOfMoves++;
				}while(guessValidator.validateGuess(secretNumber, arrayGuess, numDigits) == false); //equals true when guess is the secret number
				System.out.println("Congraulations! You won in " + numberOfMoves + " moves.\n");
				gamesCompleted++;
				player1.updateStats(gamesCompleted, numberOfMoves); //updates the stats
				System.out.println("Statistics for " + name + ":");
				System.out.println("Games completed: " + gamesCompleted);
				System.out.println("Number of digits: " + numDigits);
				System.out.println("Fastest win: " + player1.getFastestWin() + " guesses");
				System.out.println("p - Play again");
				System.out.println("r - Reset game");
				System.out.println("q - Quit");
				System.out.print("\nWhat would you like to do? ");
				c = keyboard.next();
				if(c.equalsIgnoreCase("q")) { //if the player inputs q the game quits
					System.out.println("\nGoodbye!");
					System.exit(0);
				}
			}while(c.equalsIgnoreCase("p"));//if they input p it generates a new secret number but the number of digits and the name remain the same
		} while(c.equalsIgnoreCase("r"));//if it equals r all variables are reset and the game beings again
	}
}
